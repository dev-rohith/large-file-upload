AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  sam-app
  Sample SAM Template with explicit REST API and S3 pre-signed URL Lambda.

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  BucketName:
    Type: String
    Default: "my-serverless-rohith-s3bucket-large-upload"
    Description: upload large file to s3

Resources:
  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      EndpointConfiguration: REGIONAL
      Name: MyUploadToS3RestApi
      TracingEnabled: true

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
 

  UploadToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Events:
        UploadToS3:
          Type: Api
          Properties:
            Path: /get-presigned-url
            Method: get
            RestApiId: !Ref MyRestApi
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketName
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - "@aws-sdk/client-s3"
          - "@aws-sdk/s3-request-presigner"

Outputs:
  UploadToS3Api:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  UploadToS3Function:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt UploadToS3Function.Arn

  UploadToS3FunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt UploadToS3FunctionRole.Arn
